import uvicorn
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
import asyncio
from gpts import Gpts

app = FastAPI()

gpts = Gpts()

class RequestData(BaseModel):
    text: Optional[str] = None
    img: Optional[list[str]] = None
    url_gpts:str
    session_path:str

@app.on_event("startup")
async def startup_event():
    print("Starting FastAPI with Gpts instance...")
    await gpts.start_worker()

@app.post("/process")
async def process_request(request_data: RequestData):

    try:
        future = await gpts.add_message_to_queue(request_data.dict())
        result = await future
        return {"result": result}
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)
